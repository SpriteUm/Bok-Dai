from models import db
from datetime import datetime

class Issue(db.Model):
    __tablename__ = 'issues'

    # ++ ‡πÄ‡∏û‡∏¥‡πà‡∏° list ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ++
    # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå routes/admin.py
    ALLOWED_STATUSES = ['‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß']

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    category = db.Column(db.String(100), nullable=False)
    detail = db.Column(db.Text, nullable=False)
    date_reported = db.Column(db.Date, nullable=False)
    location_text = db.Column(db.String(200))
    # NOTE: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Enum ‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DB ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
    urgency = db.Column(db.Enum('üî¥','üü†','üü¢', name='urgency_levels'), nullable=False)
    status = db.Column(
        db.Enum(*ALLOWED_STATUSES, name='issue_status'), # ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å list ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        default=ALLOWED_STATUSES[0], # '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
        nullable=False
    )
    location_link = db.Column(db.String(300))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # --- Relationships ---
    # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    images = db.relationship('IssueImage', backref='issue', lazy=True, cascade="all, delete-orphan")
    status_history = db.relationship('IssueStatusHistory', backref='issue', lazy=True, cascade="all, delete-orphan")

    def __repr__(self):
        return f'<Issue {self.id}>'