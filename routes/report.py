import os
import uuid
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app
from flask_login import login_required, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, TextAreaField, SubmitField, DateField
from wtforms.validators import DataRequired
from datetime import datetime
from models import db
from models.issue import Issue

try:
    from models.issue_image import IssueImage
except ImportError:
    IssueImage = None

report_bp = Blueprint('report', __name__, template_folder='../templates')

def ensure_upload_folder():
    folder = current_app.config.get('UPLOAD_FOLDER', os.path.join(current_app.root_path, 'static', 'uploads'))
    os.makedirs(folder, exist_ok=True)
    return folder

ALLOWED_EXT = {'png', 'jpg', 'jpeg', 'gif'}
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXT

class ReportForm(FlaskForm):
    category = SelectField('‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠', choices=[
        ('', '-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --'),
        ('‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å'),
        ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î'),
        ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'),
        ('‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'),
        ('‡∏≠‡∏∑‡πà‡∏ô‡πÜ', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    ], validators=[DataRequired()])
    other_text = StringField('‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    detail = TextAreaField('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', validators=[DataRequired()])
    date_reported = DateField('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', format='%Y-%m-%d', validators=[DataRequired()], default=datetime.utcnow)
    location_text = StringField('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', validators=[DataRequired()])
    location_link = StringField('‡∏•‡∏¥‡∏á‡∏Å‡πå Google Maps')
    urgency = SelectField('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô', choices=[
        ('üî¥', '‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'), ('üü†', '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'), ('üü¢', '‡∏ï‡πà‡∏≥')
    ], validators=[DataRequired()])
    submit = SubmitField('‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô')

@report_bp.route('/report', methods=['GET', 'POST'])
@login_required
def report():
    form = ReportForm()

    if form.validate_on_submit():
        try:
            category_value = form.other_text.data if form.category.data == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' and form.other_text.data else form.category.data
            issue = Issue(
                user_id=current_user.id,
                category=category_value,
                detail=form.detail.data,
                date_reported=form.date_reported.data or datetime.utcnow().date(),
                location_text=form.location_text.data,
                location_link=form.location_link.data,
                urgency=form.urgency.data,
                status='‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
            )
            db.session.add(issue)
            db.session.flush()

            saved_files = []
            if IssueImage is not None:
                upload_folder = ensure_upload_folder()
                files = request.files.getlist('images[]')
                for f in files:
                    if not f or f.filename == '':
                        continue
                    if not allowed_file(f.filename):
                        flash(f"‡πÑ‡∏ü‡∏•‡πå {f.filename} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö", "error")
                        continue
                    safe_name = f"{uuid.uuid4().hex}_{f.filename}"
                    dest = os.path.join(upload_folder, safe_name)
                    f.save(dest)
                    rel_path = os.path.relpath(dest, current_app.root_path)
                    img = IssueImage(issue_id=issue.id, file_path=rel_path)
                    db.session.add(img)
                    saved_files.append(safe_name)

            db.session.commit()
            flash("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ index ‡πÅ‡∏ó‡∏ô indexuser
            return redirect(url_for('index'))

        except Exception as e:
            current_app.logger.exception("‚ùå Error saving Issue:")
            db.session.rollback()
            flash(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", "error")

    elif request.method == 'POST':
        flash("‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô", "error")
        current_app.logger.warning(f"Form errors: {form.errors}")

    return render_template('report.html', form=form)
