import os
import uuid
from werkzeug.utils import secure_filename
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app
from flask_login import login_required, current_user
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, TextAreaField, SubmitField, DateField, FloatField
from wtforms.validators import DataRequired
from datetime import datetime
from models import db
from models.issue import Issue

try:
    from models.issue_image import IssueImage
except ImportError:
    IssueImage = None

report_bp = Blueprint('report', __name__, template_folder='../templates')

def ensure_upload_folder():
    folder = current_app.config.get('UPLOAD_FOLDER', os.path.join(current_app.root_path, 'static', 'uploads'))
    os.makedirs(folder, exist_ok=True)
    return folder

ALLOWED_EXT = {'png', 'jpg', 'jpeg', 'gif'}
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXT

class ReportForm(FlaskForm):
    category = SelectField('‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠', choices=[
        ('', '-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà --'),
        ('‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å'),
        ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î'),
        ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'),
        ('‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'),
        ('‡∏≠‡∏∑‡πà‡∏ô‡πÜ', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    ], validators=[DataRequired()])
    other_text = StringField('‡∏≠‡∏∑‡πà‡∏ô‡πÜ')
    detail = TextAreaField('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', validators=[DataRequired()])
    date_reported = DateField('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', format='%Y-%m-%d', validators=[DataRequired()], default=datetime.utcnow)
    location_text = StringField('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà', validators=[DataRequired()])
    urgency = SelectField('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô', choices=[
        ('üî¥', '‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î'), ('üü†', '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'), ('üü¢', '‡∏ï‡πà‡∏≥')
    ], validators=[DataRequired()])
    lat = FloatField('‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î')
    lng = FloatField('‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î')
    submit = SubmitField('‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô')

# ‚úÖ route
@report_bp.route('/', methods=['GET', 'POST'])
@login_required
def report():
    form = ReportForm()

    # üß† ‡πÄ‡∏û‡∏¥‡πà‡∏° debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏° valid ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if request.method == 'POST':
        current_app.logger.info("üì• POST received at /report")
        current_app.logger.info(f"Form data: {request.form}")

    if form.validate_on_submit():
        try:
            # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ other_text ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            category_value = form.other_text.data if form.category.data == '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' and form.other_text.data else form.category.data

            issue = Issue(
                user_id=current_user.id,
                category=category_value,
                detail=form.detail.data,
                date_reported=form.date_reported.data or datetime.utcnow().date(),
                location_text=form.location_text.data,
                urgency=form.urgency.data,
                status='‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                lat=form.lat.data if form.lat.data is not None else None,
                lng=form.lng.data if form.lng.data is not None else None
            )

            db.session.add(issue)
            db.session.flush()

            saved_files = []
            if IssueImage is not None:
                upload_folder = ensure_upload_folder()
                files = request.files.getlist('images[]')
                for f in files:
                    if not f or f.filename == '':
                        continue
                    if not allowed_file(f.filename):
                        flash(f"‡πÑ‡∏ü‡∏•‡πå {f.filename} ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö", "error")
                        continue
                    safe_name = secure_filename(f.filename)
                    name = f"{uuid.uuid4().hex}_{safe_name}"
                    dest = os.path.join(upload_folder, name)
                    f.save(dest)
                    rel_path = os.path.relpath(dest, current_app.root_path)
                    img = IssueImage(issue_id=issue.id, file_path=rel_path)
                    db.session.add(img)
                    saved_files.append(name)

            db.session.commit()
