# 1. Standard library imports
from datetime import datetime, date
from functools import wraps
import json

# 2. Third-party imports
from flask import Blueprint, render_template, redirect, url_for, flash, abort, request
from flask_login import login_required, current_user
from sqlalchemy import func

# 3. Local application imports
from models import db
from models.user import User
from models.issue import Issue
from models.issueStatusHistory import IssueStatusHistory

# --- Blueprint Setup ---
admin_bp = Blueprint('admin', __name__, url_prefix='/admin')

# --- Helper Function (Decorator) ---
def admin_required(f):
    """Decorator for checking if the current user is an 'admin'."""
    @wraps(f)
    @login_required
    def decorated_function(*args, **kwargs):
        if not current_user.is_admin:
            abort(403)  # Forbidden
        return f(*args, **kwargs)
    return decorated_function

# --- Dashboard & Main Page Routes ---
@admin_bp.route('/')
@admin_bp.route('/dashboard')
@admin_required
def dashboard():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Admin ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    # --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Summary Cards ---
    total_issues = Issue.query.count()
    issues_pending = Issue.query.filter_by(status='‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£').count()
    issues_in_progress = Issue.query.filter_by(status='‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£').count()
    issues_completed = Issue.query.filter_by(status='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß').count()
    today_start = datetime.combine(date.today(), datetime.min.time())
    issues_today = Issue.query.filter(Issue.created_at >= today_start).count()
    issues_urgent = Issue.query.filter_by(urgency='üî¥').count()
    
    # --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" ---
    recent_issues = Issue.query.order_by(Issue.created_at.desc()).limit(5).all()

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü ---
    chart_data_query = db.session.query(
        Issue.category, 
        func.count(Issue.id)
    ).group_by(Issue.category).order_by(func.count(Issue.id).desc()).limit(5).all()
    
    chart_labels = [row[0] for row in chart_data_query]
    chart_values = [row[1] for row in chart_data_query]
    
    chart_data = { "labels": chart_labels, "values": chart_values }

    # **** FIX: ‡∏à‡∏±‡∏î‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á return render_template ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ****
    return render_template('admin.html',
                           total_issues=total_issues,
                           issues_pending=issues_pending,
                           issues_in_progress=issues_in_progress,
                           issues_completed=issues_completed,
                           issues_today=issues_today,
                           issues_urgent=issues_urgent,
                           recent_issues=recent_issues,
                           chart_data=chart_data
                          )

# --- Issue Management Routes ---
@admin_bp.route('/issues')
@admin_required
def manage_issues():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤/‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    issues = Issue.query.order_by(Issue.created_at.desc()).all()
    return render_template('report.html', issues=issues)


@admin_bp.route('/issue/update/<int:issue_id>', methods=['GET', 'POST'])
@admin_required
def update_issue_page(issue_id):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏´‡∏ô‡πâ‡∏≤" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Issue"""
    issue = Issue.query.get_or_404(issue_id)

    if request.method == 'POST':
        issue.detail = request.form.get('detail', issue.detail)
        db.session.commit()
        flash(f'‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á Issue #{issue.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
        return redirect(url_for('admin.update_issue_page', issue_id=issue.id))

    return render_template('updateadmin.html', issue=issue)


@admin_bp.route('/issue/update_status/<int:issue_id>', methods=['POST'])
@admin_required
def update_issue_status(issue_id):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ "‡∏ü‡∏≠‡∏£‡πå‡∏°" ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ detail)"""
    issue = Issue.query.get_or_404(issue_id)
    new_status = request.form.get('status')
    notes = request.form.get('notes', '').strip()

    if not new_status or new_status not in Issue.ALLOWED_STATUSES:
        flash('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error')
    else:
        issue.status = new_status
        issue.updated_at = datetime.utcnow()
        history_log = IssueStatusHistory(
            issue_id=issue.id, status=new_status, notes=notes,
            changed_by_id=current_user.id
        )
        db.session.add(history_log)
        db.session.commit()
        flash(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô #{issue.id} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô "{new_status}" ‡πÅ‡∏•‡πâ‡∏ß', 'success')

    return redirect(url_for('admin.update_issue_page', issue_id=issue.id))

# --- User Management Routes ---
@admin_bp.route('/users')
@admin_required
def manage_users():
    users = User.query.filter(User.id != current_user.id).all()
    return render_template('indexuser.html', users=users)


@admin_bp.route('/user/toggle_admin/<int:user_id>', methods=['POST'])
@admin_required
def toggle_admin_status(user_id):
    user_to_toggle = User.query.get_or_404(user_id)
    if user_to_toggle.id == current_user.id:
        flash('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Admin ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ', 'warning')
        return redirect(url_for('admin.manage_users'))
    if user_to_toggle.is_admin:
        admin_count = User.query.filter_by(is_admin=True).count()
        if admin_count <= 1:
            flash('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ', 'error')
            return redirect(url_for('admin.manage_users'))
    user_to_toggle.is_admin = not user_to_toggle.is_admin
    db.session.commit()
    status_text = '‡πÄ‡∏õ‡πá‡∏ô Admin' if user_to_toggle.is_admin else '‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
    flash(f'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á {user_to_toggle.username} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô {status_text} ‡πÅ‡∏•‡πâ‡∏ß', 'success')
    return redirect(url_for('admin.manage_users'))

@admin_bp.route('/user/delete/<int:user_id>', methods=['POST'])
@admin_required
def delete_user(user_id):
    user_to_delete = User.query.get_or_404(user_id)
    if user_to_delete.id == current_user.id:
        flash('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ', 'warning')
        return redirect(url_for('admin.manage_users'))
    if user_to_delete.is_admin:
        admin_count = User.query.filter_by(is_admin=True).count()
        if admin_count <= 1:
            flash('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Admin ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ', 'error')
            return redirect(url_for('admin.manage_users'))
    try:
        db.session.delete(user_to_delete)
        db.session.commit()
        flash(f'‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_to_delete.username} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {str(e)}', 'error')
    return redirect(url_for('admin.manage_users'))